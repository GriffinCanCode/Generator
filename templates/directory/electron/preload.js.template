const { contextBridge, ipcRenderer } = require('electron');

// Expose protected methods that allow the renderer process to use
// the ipcRenderer without exposing the entire object
contextBridge.exposeInMainWorld('electronAPI', {
  // App info
  getAppVersion: () => ipcRenderer.invoke('app:get-version'),
  
  // File operations
  openFile: () => ipcRenderer.invoke('file:open'),
  saveFile: (content) => ipcRenderer.invoke('file:save', content),
  
  // Window operations
  minimizeWindow: () => ipcRenderer.invoke('window:minimize'),
  maximizeWindow: () => ipcRenderer.invoke('window:maximize'),
  closeWindow: () => ipcRenderer.invoke('window:close'),
  
  // System operations
  showNotification: (title, body) => ipcRenderer.invoke('system:notification', { title, body }),
  openExternal: (url) => ipcRenderer.invoke('system:open-external', url),
  
  // Settings
  getSettings: () => ipcRenderer.invoke('settings:get'),
  saveSettings: (settings) => ipcRenderer.invoke('settings:save', settings),
  
  // Event listeners
  onMenuAction: (callback) => {
    ipcRenderer.on('menu:action', callback);
    // Return a function to remove the listener
    return () => ipcRenderer.removeListener('menu:action', callback);
  },
  
  onAppUpdate: (callback) => {
    ipcRenderer.on('app:update', callback);
    return () => ipcRenderer.removeListener('app:update', callback);
  }
});

// Security: Remove access to Node.js APIs
delete window.require;
delete window.exports;
delete window.module; 