#!/bin/bash

# Generate System - Main Executable
# A comprehensive template generation system with smart append functionality
# Usage: generate <type> [options]

set -e

# Get the directory where this script is located
# Handle both direct execution and symlink execution
if [ -L "${BASH_SOURCE[0]}" ]; then
    SCRIPT_PATH="$(readlink "${BASH_SOURCE[0]}")"
    SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
else
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi
TEMPLATES_DIR="$SCRIPT_DIR/templates"
GENERATORS_DIR="$SCRIPT_DIR/generators"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to get smart mapping for a given type
get_smart_mapping() {
    local type="$1"
    
    case "$type" in
        # Electron mappings
        "electron"|"electron-app")
            echo "directory:electron gitignore:node config:eslint config:prettier config:vscode"
            ;;
        # Node.js mappings
        "node"|"nodejs"|"node-project")
            echo "directory:node gitignore:node config:eslint config:prettier config:vscode"
            ;;
        # Python mappings
        "python"|"python-project")
            echo "directory:python gitignore:python config:vscode"
            ;;
        # React mappings
        "react"|"react-frontend")
            echo "directory:react-frontend gitignore:react config:eslint config:prettier config:vscode"
            ;;
        # Next.js mappings
        "nextjs"|"next"|"nextjs-fullstack")
            echo "directory:nextjs-fullstack gitignore:nextjs config:eslint config:prettier config:vscode"
            ;;
        # FastAPI mappings
        "fastapi"|"fastapi-backend")
            echo "directory:fastapi-backend gitignore:fastapi config:docker config:vscode"
            ;;
        # Docker mappings
        "docker"|"docker-project")
            echo "config:docker gitignore:docker"
            ;;
        # Microservices mappings
        "microservices"|"microservices-stack")
            echo "directory:microservices gitignore:microservices config:docker config:kubernetes config:monitoring"
            ;;
        # Full-stack combinations
        "fullstack"|"full-stack")
            echo "directory:nextjs-fullstack directory:fastapi-backend gitignore:nextjs config:docker config:eslint config:prettier config:vscode"
            ;;
        # Documentation
        "docs"|"documentation")
            echo "directory:docs"
            ;;
        *)
            echo ""
            ;;
    esac
}

# Function to list all smart append options
list_smart_mappings() {
    echo "electron electron-app"
    echo "node nodejs node-project"
    echo "python python-project"
    echo "react react-frontend"
    echo "nextjs next nextjs-fullstack"
    echo "fastapi fastapi-backend"
    echo "docker docker-project"
    echo "microservices microservices-stack"
    echo "fullstack full-stack"
    echo "docs documentation"
}

# Function to display usage
usage() {
    echo -e "${BLUE}Generate System - Template Generator with Smart Append${NC}"
    echo ""
    echo "Usage: generate <type> [options]"
    echo ""
    echo "Available generators:"
    echo "  gitignore <language>    Generate .gitignore file for specified language"
    echo "  directory <type>        Generate directory structure"
    echo "  config <type>           Generate configuration files"
    echo "  license <type>          Generate license file (MIT, Apache-2.0, BSD-3-Clause)"
    echo ""
    echo -e "${PURPLE}Smart Append (Auto-generates related templates):${NC}"
    echo "  electron               Generate Electron app with configs and gitignore"
    echo "  node                   Generate Node.js project with full setup"
    echo "  python                 Generate Python project with full setup"
    echo "  react                  Generate React frontend with full setup"
    echo "  nextjs                 Generate Next.js fullstack with full setup"
    echo "  fastapi                Generate FastAPI backend with full setup"
    echo "  microservices          Generate microservices stack with full setup"
    echo "  fullstack              Generate complete fullstack setup"
    echo "  docs                   Generate comprehensive documentation structure"
    echo ""
    echo "Options:"
    echo "  -h, --help             Show this help message"
    echo "  -l, --list             List available templates"
    echo "  -s, --smart            List available smart append options"
    echo "  -o, --output <path>    Specify output path (default: current directory)"
    echo "  --dry-run              Show what would be generated without creating files"
    echo ""
    echo "Examples:"
    echo "  generate electron my-app           # Creates Electron app with all configs"
    echo "  generate python my-project         # Creates Python project with setup"
    echo "  generate fullstack my-app          # Creates complete fullstack setup"
    echo "  generate license MIT               # Creates MIT license file"
    echo "  generate node --dry-run            # Shows what would be generated"
}

# Function to list smart append options
list_smart_options() {
    echo -e "${PURPLE}Smart Append Options:${NC}"
    echo ""
    
    local mappings=(
        "electron:directory:electron gitignore:node config:eslint config:prettier config:vscode"
        "node:directory:node gitignore:node config:eslint config:prettier config:vscode"
        "python:directory:python gitignore:python config:vscode"
        "react:directory:react-frontend gitignore:react config:eslint config:prettier config:vscode"
        "nextjs:directory:nextjs-fullstack gitignore:nextjs config:eslint config:prettier config:vscode"
        "fastapi:directory:fastapi-backend gitignore:fastapi config:docker config:vscode"
        "docker:config:docker gitignore:docker"
        "microservices:directory:microservices gitignore:microservices config:docker config:kubernetes config:monitoring"
        "fullstack:directory:nextjs-fullstack directory:fastapi-backend gitignore:nextjs config:docker config:eslint config:prettier config:vscode"
        "docs:directory:docs"
    )
    
    for mapping in "${mappings[@]}"; do
        local key="${mapping%%:*}"
        local commands="${mapping#*:}"
        echo -e "  ${GREEN}$key${NC}"
        echo "    Generates: $commands"
        echo ""
    done
}

# Function to list available templates
list_templates() {
    echo -e "${BLUE}Available Templates:${NC}"
    echo ""
    
    if [ -d "$TEMPLATES_DIR/gitignore" ]; then
        echo -e "${GREEN}GitIgnore Templates:${NC}"
        for template in "$TEMPLATES_DIR/gitignore"/*.gitignore; do
            if [ -f "$template" ]; then
                basename "$template" .gitignore | sed 's/^/  - /'
            fi
        done
        echo ""
    fi
    
    if [ -d "$TEMPLATES_DIR/directory" ]; then
        echo -e "${GREEN}Directory Templates:${NC}"
        for template in "$TEMPLATES_DIR/directory"/*; do
            if [ -d "$template" ]; then
                basename "$template" | sed 's/^/  - /'
            fi
        done
        echo ""
    fi
    
    if [ -d "$TEMPLATES_DIR/config" ]; then
        echo -e "${GREEN}Config Templates:${NC}"
        for template in "$TEMPLATES_DIR/config"/*; do
            if [ -f "$template" ]; then
                basename "$template" | sed 's/^/  - /'
            fi
        done
        echo ""
    fi
    
    if [ -d "$TEMPLATES_DIR/license" ]; then
        echo -e "${GREEN}License Templates:${NC}"
        for template in "$TEMPLATES_DIR/license"/*.template; do
            if [ -f "$template" ]; then
                basename "$template" .template | sed 's/^/  - /'
            fi
        done
        echo ""
    fi
    
    list_smart_options
}

# Function to execute smart append
smart_append() {
    local type="$1"
    local project_name="$2"
    local output_path="${3:-./}"
    local dry_run="$4"
    
    # Normalize the type (convert to lowercase and handle variations)
    local normalized_type=$(echo "$type" | tr '[:upper:]' '[:lower:]' | sed 's/-app$//' | sed 's/-project$//')
    
    # Try to find a mapping
    local mapping=""
    mapping=$(get_smart_mapping "$type")
    
    if [ -z "$mapping" ]; then
        mapping=$(get_smart_mapping "$normalized_type")
    fi
    
    # Try partial matching if still no mapping found
    if [ -z "$mapping" ]; then
        local smart_keys=$(list_smart_mappings)
        for line in $smart_keys; do
            for key in $line; do
                if [[ "$type" =~ $key ]] || [[ "$key" =~ $type ]]; then
                    mapping=$(get_smart_mapping "$key")
                    break 2
                fi
            done
        done
    fi
    
    if [ -z "$mapping" ]; then
        return 1  # No smart mapping found
    fi
    
    echo -e "${PURPLE}Smart Append: Generating $type setup${NC}"
    if [ -n "$project_name" ]; then
        echo -e "${BLUE}Project Name: $project_name${NC}"
    fi
    echo -e "${BLUE}Output Path: $output_path${NC}"
    echo ""
    
    if [ "$dry_run" = "true" ]; then
        echo -e "${YELLOW}DRY RUN - The following would be generated:${NC}"
    fi
    
    # Parse and execute each command in the mapping
    for cmd in $mapping; do
        local cmd_type="${cmd%%:*}"
        local cmd_arg="${cmd#*:}"
        
        if [ "$dry_run" = "true" ]; then
            echo -e "  ${GREEN}Would run:${NC} generate $cmd_type $cmd_arg"
            continue
        fi
        
        echo -e "${BLUE}Generating:${NC} $cmd_type $cmd_arg"
        
        case "$cmd_type" in
            "directory")
                if [ -n "$project_name" ]; then
                    "$GENERATORS_DIR/directory.sh" "$cmd_arg" "$project_name" "$output_path"
                else
                    "$GENERATORS_DIR/directory.sh" "$cmd_arg" "$output_path"
                fi
                ;;
            "gitignore")
                if [ -n "$project_name" ] && [ -d "$output_path/$project_name" ]; then
                    generate_gitignore "$cmd_arg" "$output_path/$project_name"
                else
                    generate_gitignore "$cmd_arg" "$output_path"
                fi
                ;;
            "config")
                if [ -n "$project_name" ] && [ -d "$output_path/$project_name" ]; then
                    "$GENERATORS_DIR/config.sh" "$cmd_arg" "$output_path/$project_name"
                else
                    "$GENERATORS_DIR/config.sh" "$cmd_arg" "$output_path"
                fi
                ;;
        esac
        echo ""
    done
    
    if [ "$dry_run" != "true" ]; then
        echo -e "${GREEN}Smart Append completed successfully!${NC}"
        echo -e "${YELLOW}Next steps:${NC}"
        if [ -n "$project_name" ]; then
            echo -e "  1. cd $project_name"
        fi
        echo -e "  2. Install dependencies (npm install, pip install -r requirements.txt, etc.)"
        echo -e "  3. Start development"
    fi
    
    return 0
}

# Function to detect project owner/author name
detect_project_name() {
    local detected_name=""
    
    # Priority 1: Check package.json for author information (project-specific)
    if [ -f "package.json" ]; then
        local pkg_author=$(grep -o '"author"[[:space:]]*:[[:space:]]*"[^"]*"' package.json 2>/dev/null | sed 's/.*"author"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        if [ -n "$pkg_author" ] && [ "$pkg_author" != "Your Name" ] && [ "$pkg_author" != "TODO" ]; then
            echo "$pkg_author"
            return 0
        fi
        
        # Also check for author object format
        local pkg_author_name=$(grep -A 5 '"author"[[:space:]]*:[[:space:]]*{' package.json 2>/dev/null | grep '"name"' | sed 's/.*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        if [ -n "$pkg_author_name" ] && [ "$pkg_author_name" != "Your Name" ] && [ "$pkg_author_name" != "TODO" ]; then
            echo "$pkg_author_name"
            return 0
        fi
    fi
    
    # Priority 2: Check pyproject.toml for Python projects
    if [ -f "pyproject.toml" ]; then
        local py_author=$(grep -A 5 'authors[[:space:]]*=' pyproject.toml 2>/dev/null | grep 'name[[:space:]]*=' | head -1 | sed 's/.*name[[:space:]]*=[[:space:]]*"\([^"]*\)".*/\1/')
        if [ -n "$py_author" ] && [ "$py_author" != "Your Name" ] && [ "$py_author" != "TODO" ]; then
            echo "$py_author"
            return 0
        fi
    fi
    
    # Priority 3: Check Cargo.toml for Rust projects
    if [ -f "Cargo.toml" ]; then
        local rust_author=$(grep '^authors[[:space:]]*=' Cargo.toml 2>/dev/null | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
        if [ -n "$rust_author" ] && [ "$rust_author" != "Your Name" ] && [ "$rust_author" != "TODO" ]; then
            echo "$rust_author"
            return 0
        fi
    fi
    
    # Priority 4: Check composer.json for PHP projects
    if [ -f "composer.json" ]; then
        local php_author=$(grep -o '"name"[[:space:]]*:[[:space:]]*"[^"]*"' composer.json 2>/dev/null | head -1 | sed 's/.*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        if [ -n "$php_author" ] && [ "$php_author" != "Your Name" ] && [ "$php_author" != "TODO" ]; then
            echo "$php_author"
            return 0
        fi
    fi
    
    # Priority 5: Check existing LICENSE file for current copyright holder
    if [ -f "LICENSE" ] || [ -f "LICENSE.txt" ] || [ -f "LICENSE.md" ]; then
        local license_file=""
        [ -f "LICENSE" ] && license_file="LICENSE"
        [ -f "LICENSE.txt" ] && license_file="LICENSE.txt"
        [ -f "LICENSE.md" ] && license_file="LICENSE.md"
        
        if [ -n "$license_file" ]; then
            local existing_name=$(grep -i "copyright.*[0-9]" "$license_file" 2>/dev/null | sed 's/.*[0-9][0-9][0-9][0-9][-,][[:space:]]*\([^.]*\).*/\1/' | head -1 | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
            if [ -n "$existing_name" ] && [ ${#existing_name} -lt 100 ] && [ "$existing_name" != "$(whoami)" ]; then
                echo "$existing_name"
                return 0
            fi
        fi
    fi
    
    # Priority 6: Git user name (reliable for individual projects)
    if git config user.name >/dev/null 2>&1; then
        detected_name=$(git config user.name 2>/dev/null)
        if [ -n "$detected_name" ] && [ "$detected_name" != "$(whoami)" ]; then
            echo "$detected_name"
            return 0
        fi
    fi
    
    # Priority 7: Check git commit author names (look for consistent author)
    if git log --format="%an" >/dev/null 2>&1; then
        local git_authors=$(git log --format="%an" 2>/dev/null | sort | uniq -c | sort -nr | head -3)
        local primary_author=$(echo "$git_authors" | head -1 | sed 's/^[[:space:]]*[0-9]*[[:space:]]*//')
        if [ -n "$primary_author" ] && [ "$primary_author" != "$(whoami)" ] && [ ${#primary_author} -lt 50 ]; then
            echo "$primary_author"
            return 0
        fi
    fi
    
    # Priority 8: Check GitHub/GitLab remote for organization/user name
    if git remote get-url origin >/dev/null 2>&1; then
        local remote_url=$(git remote get-url origin 2>/dev/null)
        local repo_owner=""
        
        # Parse GitHub/GitLab URLs
        if [[ "$remote_url" =~ github\.com[:/]([^/]+)/([^/]+) ]]; then
            repo_owner="${BASH_REMATCH[1]}"
        elif [[ "$remote_url" =~ gitlab\.com[:/]([^/]+)/([^/]+) ]]; then
            repo_owner="${BASH_REMATCH[1]}"
        fi
        
        if [ -n "$repo_owner" ] && [ "$repo_owner" != "$(whoami)" ] && [ ${#repo_owner} -lt 30 ]; then
            # Convert username to more readable format if it looks like a username
            local formatted_name=$(echo "$repo_owner" | sed 's/-/ /g' | sed 's/_/ /g' | sed 's/\b\w/\U&/g')
            if [ ${#formatted_name} -lt 50 ]; then
                echo "$formatted_name"
                return 0
            fi
        fi
    fi
    
    # Priority 9: Use git config user.name even if it matches whoami
    if git config user.name >/dev/null 2>&1; then
        detected_name=$(git config user.name 2>/dev/null)
        if [ -n "$detected_name" ]; then
            echo "$detected_name"
            return 0
        fi
    fi
    
    # Priority 10: Fall back to system username (last resort)
    echo "$(whoami)"
}

# Function to detect project date range
detect_project_dates() {
    local current_year=$(date +%Y)
    local git_start_year=""
    local file_start_year=""
    
    # Try to get the earliest git commit year
    if git rev-parse --git-dir >/dev/null 2>&1; then
        git_start_year=$(git log --reverse --format="%ad" --date=format:"%Y" 2>/dev/null | head -1)
    fi
    
    # Try to get the earliest file modification year in the project
    if command -v find >/dev/null 2>&1; then
        # Look for common source code files
        local files=$(find . -maxdepth 3 -type f \( -name "*.js" -o -name "*.py" -o -name "*.java" -o -name "*.cpp" -o -name "*.c" -o -name "*.go" -o -name "*.rs" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.sh" -o -name "*.rb" -o -name "*.php" \) 2>/dev/null | head -5)
        if [ -n "$files" ]; then
            # Use stat command appropriate for the OS
            if [[ "$OSTYPE" == "darwin"* ]]; then
                file_start_year=$(echo "$files" | xargs stat -f "%Sm" -t "%Y" 2>/dev/null | sort -n | head -1)
            else
                file_start_year=$(echo "$files" | xargs stat -c "%Y" 2>/dev/null | xargs -I {} date -d @{} +%Y | sort -n | head -1)
            fi
        fi
    fi
    
    # Determine the best start year
    local start_year=""
    if [ -n "$git_start_year" ] && [ "$git_start_year" -le "$current_year" ]; then
        start_year="$git_start_year"
    elif [ -n "$file_start_year" ] && [ "$file_start_year" -le "$current_year" ]; then
        start_year="$file_start_year"
    else
        start_year="$current_year"
    fi
    
    # Return the appropriate date format
    if [ "$start_year" = "$current_year" ]; then
        echo "$current_year"
    else
        echo "$start_year-$current_year"
    fi
}

# Function to generate license
generate_license() {
    local license_type="$1"
    local output_path="${2:-./}"
    local fullname="${3:-$(detect_project_name)}"
    local year="${4:-$(detect_project_dates)}"
    
    if [ -z "$license_type" ]; then
        echo -e "${RED}Error: License type not specified${NC}"
        echo "Usage: generate license <type> [fullname] [year]"
        echo "Note: If year is not specified, automatically detects project date range from git history or file dates"
        echo "Available licenses:"
        for template in "$TEMPLATES_DIR/license"/*.template; do
            if [ -f "$template" ]; then
                basename "$template" .template | sed 's/^/  - /'
            fi
        done
        exit 1
    fi
    
    local template_file="$TEMPLATES_DIR/license/${license_type}.template"
    
    if [ ! -f "$template_file" ]; then
        echo -e "${RED}Error: License template for '$license_type' not found${NC}"
        echo "Available licenses:"
        for template in "$TEMPLATES_DIR/license"/*.template; do
            if [ -f "$template" ]; then
                basename "$template" .template | sed 's/^/  - /'
            fi
        done
        exit 1
    fi
    
    local output_file="$output_path/LICENSE"
    
    if [ -f "$output_file" ]; then
        echo -e "${YELLOW}Warning: LICENSE file already exists. Overwrite? (y/n)${NC}"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "Operation cancelled."
            exit 0
        fi
    fi
    
    # Replace placeholders in the template using a more robust method
    # First validate that fullname doesn't contain newlines
    if [[ "$fullname" == *$'\n'* ]]; then
        echo -e "${RED}Error: Full name cannot contain newlines${NC}"
        exit 1
    fi
    
    # Use awk for more reliable substitution
    awk -v year="$year" -v fullname="$fullname" '
    {
        gsub(/\{\{YEAR\}\}/, year)
        gsub(/\{\{FULLNAME\}\}/, fullname)
        print
    }' "$template_file" > "$output_file"
    
    echo -e "${GREEN}Generated $license_type license at $output_file${NC}"
    echo -e "${BLUE}Copyright: $year $fullname${NC}"
    
    # Show detection info if parameters were auto-detected
    local show_name_info=false
    local show_date_info=false
    
    if [ $# -lt 3 ]; then
        show_name_info=true
    fi
    
    if [ $# -lt 4 ]; then
        show_date_info=true
    fi
    
    if [ "$show_name_info" = true ] || [ "$show_date_info" = true ]; then
        echo -e "${YELLOW}Auto-detection info:${NC}"
        
        if [ "$show_name_info" = true ]; then
            echo -e "${YELLOW}  • Name: Auto-detected from project context${NC}"
        fi
        
        if [ "$show_date_info" = true ]; then
            if [[ "$year" == *"-"* ]]; then
                echo -e "${YELLOW}  • Date: Auto-detected range from project history${NC}"
            elif [ "$year" = "$(date +%Y)" ]; then
                echo -e "${YELLOW}  • Date: Using current year${NC}"
            else
                echo -e "${YELLOW}  • Date: Auto-detected year: $year${NC}"
            fi
        fi
    fi
}

# Function to generate gitignore
generate_gitignore() {
    local language="$1"
    local output_path="${2:-./}"
    
    if [ -z "$language" ]; then
        echo -e "${RED}Error: Language not specified${NC}"
        echo "Usage: generate gitignore <language>"
        echo "Available languages:"
        for template in "$TEMPLATES_DIR/gitignore"/*.gitignore; do
            if [ -f "$template" ]; then
                basename "$template" .gitignore | sed 's/^/  - /'
            fi
        done
        exit 1
    fi
    
    local template_file="$TEMPLATES_DIR/gitignore/${language}.gitignore"
    
    if [ ! -f "$template_file" ]; then
        echo -e "${RED}Error: Template for '$language' not found${NC}"
        echo "Available templates:"
        for template in "$TEMPLATES_DIR/gitignore"/*.gitignore; do
            if [ -f "$template" ]; then
                basename "$template" .gitignore | sed 's/^/  - /'
            fi
        done
        exit 1
    fi
    
    local output_file="$output_path/.gitignore"
    
    if [ -f "$output_file" ]; then
        echo -e "${YELLOW}Warning: .gitignore already exists. Overwrite? (y/n)${NC}"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "Operation cancelled."
            exit 0
        fi
    fi
    
    cp "$template_file" "$output_file"
    echo -e "${GREEN}Generated .gitignore for $language at $output_file${NC}"
}

# Main execution
main() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    # Parse options
    local dry_run="false"
    local output_path="./"
    local args=()
    
    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -l|--list)
                list_templates
                exit 0
                ;;
            -s|--smart)
                list_smart_options
                exit 0
                ;;
            --dry-run)
                dry_run="true"
                shift
                ;;
            -o|--output)
                output_path="$2"
                shift 2
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    # Restore positional parameters
    set -- "${args[@]}"
    
    if [ ${#args[@]} -eq 0 ]; then
        usage
        exit 1
    fi
    
    local command="${args[0]}"
    
    # Try smart append first
    if smart_append "$command" "${args[1]}" "$output_path" "$dry_run"; then
        exit 0
    fi
    
    # Fall back to original commands
    case "$command" in
        gitignore)
            generate_gitignore "${args[1]}" "$output_path"
            ;;
        directory)
            "$GENERATORS_DIR/directory.sh" "${args[@]:1}"
            ;;
        config)
            "$GENERATORS_DIR/config.sh" "${args[@]:1}"
            ;;
        license)
            # Handle license generation with proper argument parsing
            local license_type="${args[1]}"
            local license_fullname="${args[2]}"
            local license_year="${args[3]}"
            
            # If no fullname provided, use default
            if [ -z "$license_fullname" ]; then
                generate_license "$license_type" "$output_path"
            elif [ -z "$license_year" ]; then
                generate_license "$license_type" "$output_path" "$license_fullname"
            else
                generate_license "$license_type" "$output_path" "$license_fullname" "$license_year"
            fi
            ;;
        *)
            echo -e "${RED}Error: Unknown command '$command'${NC}"
            echo ""
            echo "Try one of these smart append options:"
            local smart_keys=$(list_smart_mappings)
            for line in $smart_keys; do
                for key in $line; do
                    echo "  generate $key [project-name]"
                done
            done
            echo ""
            echo "Or use traditional commands:"
            echo "  generate gitignore <language>"
            echo "  generate directory <type>"
            echo "  generate config <type>"
            echo "  generate license <type>"
            exit 1
            ;;
    esac
}

main "$@" 